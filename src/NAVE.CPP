#include "nave.h"
#include "tiro.h"
#include "t01.h"
#include "t02.h"
#include "t03.h"
#include "t04.h"
#include "t05.h"
#include "t06.h"
#include "t07.h"
#include "explosao.h"
#include "raspao.h"

#include <graphics.h>
#include <stdlib.h>
#include <assert.h>

extern NAVE *nave;
extern int maxx,maxy;

TipoN tipos[31]=
   {  { 30,  30,11, 20,{0,0,0,-10,5,-20,0,20,5,-10,10,0,5,10,0,-20,5,20,0,10,-30,0}},
/*01*/{ 30,  30,15,  2,{5,0,-5,-10,0,-10,5,-10,20,0,5,10,0,10,-5,10,-5,0,-5,-10,5,-10,-10,0,5,10,-5,10,-5,0}},
/*02*/{ 30,  30,17,  2,{10,0,-10,-5,0,-10,10,0,-10,-5,5,-10,5,0,5,5,5,-5,5,0,5,10,-10,5,10,0,0,10,-10,5,-5,-5,-5,5}},
/*03*/{ 30,  30,21,  4,{5,0,-5,-5,0,-5,10,0,-10,-10,0,10,0,-15,5,-5,5,0,5,10,5,-10,-10,0,15,0,5,5,0,5,-10,10,10,0,0,-10,0,15,-5,5,-20,0}},
/*04*/{ 30,  30,13,  4,{0,0,10,-10,-10,5,0,-20,10,5,-10,-10,30,0,-10,10,10,-5,0,20,-10,-5,10,10,-30,0}},
/*05*/{ 30,  30,17,  4,{10,0,-5,-5,5,-5,-10,5,10,-15,-10,5,5,-10,-5,-5,30,0,-5,5,5,10,-10,-5,10,15,-10,-5,5,5,-5,5,-10,0}},
/*06*/{ 30,  30,17,  4,{10,0,-5,-5,5,-5,-10,0,10,-10,-10,0,5,-5,-5,-5,30,0,-5,5,5,5,-10,0,10,10,-10,0,5,5,-5,5,-10,0}},
/*07*/{ 30,  10,10,  7,{5,0,-5,-5,5,-5,5,0,5,5,5,-5,5,0,5,5,-5,5,-20,0}},
/*08*/{ 30,  30, 5,300,{0,0,0,-30,30,0,0,30,-30,0}},
/*09*/{ 30,  30, 8,300,{0,-20,0,-10,30,0,0,10,-10,0,0,20,-10,0,0,-20,-10,0}},
/*10*/{ 30,  30,12,300,{0,0,0,-30,30,0,0,10,-20,0,0,5,10,0,-10,0,0,5,20,0,0,10,-30,0}},
/*11*/{ 30,  30,12,300,{0,0,0,-30,30,0,0,30,-10,0,0,-30,-5,0,0,20,0,-20,-5,0,0,30,-10,0}},
/*12*/{ 30,  30, 9, 15,{15,0,-10,-5,-5,-10,5,-10,10,-5,10,5,5,10,-5,10,-10,5}},
/*13*/{ 30,  30,14,  7,{0,0,10,-10,-10,-15,5,5,-5,-10,10,0,5,15,5,-15,10,0,-5,10,5,-5,-10,15,10,10,-30,0}},
/*14*/{ 30,  30,29, 10,{5,0,-5,-5,0,-5,10,0,-5,-5,5,-5,-10,0,0,-5,5,-5,5,0,0,5,5,-5,5,5,0,-5,5,0,5,5,0,5,-10,0,5,5,-5,5,10,0,0,5,-5,5,-5,0,0,-5,-5,5,-5,-5,0,5,-5,0}},
/*15*/{ 30,  30,14, 15,{15,-5,-5,0,-5,-5,0,-10,5,-5,10,0,5,5,0,10,-5,5,-5,0,0,-20,0,10,10,0,-20,0}},
/*16*/{ 50,  40,25, 20,{0,-20,10,0,5,-5,0,10,10,-10,10,10,0,-10,5,5,10,0,0,10,-5,5,0,5,-15,-10,-5,5,-5,-5,-15,10,0,-5,-5,-5,0,-25,5,0,5,-5,30,0,5,5,5,0,0,15}},
/*17*/{ 50,  40,18, 25,{0,0,10,-10,-10,-5,0,-10,5,-10,15,-5,10,0,15,5,5,10,0,10,-10,5,10,10,-20,-10,5,-5,-10,-5,-10,5,5,5,-20,10}},
/*18*/{ 50,  40,21, 30,{0,-30,10,0,10,5,5,-5,5,5,10,-5,10,0,-20,-10,-10,0,-20,10,0,5,5,5,-5,5,0,5,20,10,10,0,20,-10,0,-5,-5,-5,5,-5,0,-5}},
/*19*/{ 50,  40,21, 35,{5,0,-5,-20,5,-20,0,15,5,-5,15,-5,15,5,5,5,0,-15,5,20,-5,20,0,-20,-5,0,0,5,-5,5,-10,5,-10,-5,-5,-5,0,-5,-5,0,0,20}},
/*20*/{ 50,  40,29, 40,{0,0,0,-20,5,-20,5,0,10,5,5,5,5,-5,10,-5,5,0,5,20,0,20,-5,-20,0,20,-5,-20,0,15,-5,-15,0,15,-5,-15,0,5,-5,-5,-5,5,0,-5,-5,15,0,-15,-5,15,0,-15,-5,20,0,-20,-5,20}},
/*21*/{ 40,  50,14, 45,{5,0,-5,-40,5,-10,30,0,5,10,-5,40,-5,-30,-5,5,0,-5,-5,5,-5,-5,0,5,-5,-5,-5,30}},
/*22*/{ 40,  50,19, 75,{0,0,10,-10,-10,-20,5,0,0,-20,5,15,5,-5,0,15,5,-10,5,10,0,-15,5,5,5,-15,0,20,5,0,-10,20,10,10,-20,-5,-20,5}},
/*23*/{100,  60,35,150,{20,-30,20,-5,10,20,10,-20,20,5,15,0,5,-5,0,-15,-5,-10,-45,0,20,5,-10,5,-20,0,-10,-5,20,-5,-45,0,-5,10,0,15,5,5,15,0,-10,5,20,5,-30,0,0,10,25,10,15,0,0,-10,20,0,0,10,15,0,25,-10,0,-10,-30,0,20,-5,-10,-5}},
/*24*/{100,  60,47,200,{0,0,5,-5,5,-10,5,-15,-5,-15,-5,-10,-5,-5,10,5,10,15,5,-10,5,10,5,-5,-10,-5,0,-5,15,5,0,-10,10,5,10,-5,0,10,15,-5,0,5,-10,5,5,5,5,-10,5,10,10,-15,10,-5,-5,5,-5,10,-5,15,5,15,5,10,5,5,-10,-5,-10,-15,-5,10,0,-10,-20,0,0,10,-5,5,-5,-5,0,-10,-20,0,0,5,-5,-5,-10,15,-10,5}},
/*25*/{ 20,  20, 8, 25,{5,0,-5,-20,20,0,-5,20,0,-15,-5,5,-5,-5,0,15}},
/*26*/{200,  80,33,500,{30,0,-30,-10,20,-50,50,5,-20,-15,40,10,-10,-20,20,10,20,-10,-10,20,40,-10,-20,15,50,-5,20,50,-30,10,20,-10,-20,-20,-30,20,10,-20,-20,0,-20,5,10,25,-15,-20,-5,10,-5,-10,-15,20,10,-25,-20,-5,-20,0,10,20,-30,-20,-20,20,20,10}},
/*27*/{280, 100,24,750,{70,0,-50,-10,-20,-20,10,-40,30,-20,50,10,-10,-20,30,10,30,-10,30,10,30,-10,-10,20,50,-10,30,20,10,40,-20,20,-50,10,-40,-10,-10,10,-10,-20,-20,0,-10,20,-10,-10,-40,10}},
/*28*/{390,  80,56,999,{0,-20,20,10,30,-20,-10,-10,10,-10,-30,-20,-20,10,10,-20,60,10,0,-10,50,10,0,-10,50,20,10,10,10,-15,-10,-5,0,-5,10,-5,10,0,10,5,0,5,-10,5,10,15,10,-10,50,-20,0,10,50,-10,0,10,60,-10,10,20,-20,-10,-30,20,10,10,-10,10,30,20,20,-10,-10,20,-60,-10,0,10,-10,-20,0,-10,-30,0,0,20,-40,-10,-20,0,-20,20,-10,0,-20,-20,-20,0,-40,10,0,-20,-30,0,0,10,-10,20,0,-10,-60,10,-10,-20}},
/*29*/{ 70,9999,20,999,{0,0,70,0,0,-30,-10,-10,0,-10,10,0,-20,-20,20,10,-10,-20,-10,0,0,-20,20,-5,-20,-15,20,0,-10,-10,10,-40,-10,-20,10,0,0,-127,0,-127,0,-127}},
/*30*/{ 70,9999,33,999,{70,0,-70,0,0,-20,10,-10,0,-10,-5,0,5,-10,-5,0,5,-10,-5,0,5,-10,-10,-10,0,-20,10,-10,10,0,10,10,10,-10,0,-20,-10,-10,-10,10,-10,0,-10,-10,0,-20,10,-10,-5,-10,5,0,-5,-10,5,0,0,-10,-10,-10,0,-127,0,-127,0,-127}}
   };

NAVE *NAVE::primeira=NULL;
NAVE *NAVE::ultima=NULL;
GRUPO NAVE::formacao={0,0,0,0,0,0,0};

NAVE::NAVE(void){
   proximo=NULL;
   anterior=ultima;
   if(primeira==NULL) primeira=this;
   if(ultima!=NULL) ultima->proximo=this;
   ultima=this;
   cor=WHITE;
}

NAVE::~NAVE(void){
   apaga();
   NAVE *atual=this;
   if(anterior!=NULL) anterior->proximo=proximo;
   if(proximo!=NULL) proximo->anterior=anterior;
   if(ultima==atual) ultima=anterior;
   if(primeira==atual) primeira=proximo;
}

void NAVE::define(int px,int py,char pfig){
   x=px;
   y=py;
   fig=pfig;
   tamx=tipos[fig].tx;
   tamy=tipos[fig].ty;
   forca=tipos[fig].forca;
   desenha();
}


void NAVE::desenha(int poe){
   char coratual;
   if(poe){
      lastfig=fig;
      coratual=cor;
   }else{
      coratual=0;
   }
   int fim=tipos[lastfig].ptos*2;
   moveto(x+tipos[lastfig].coor[0],y+tipos[lastfig].coor[1]);
   setcolor(coratual);
   for(register char aux=2;aux<=fim;aux+=2) linerel(tipos[lastfig].coor[aux],tipos[lastfig].coor[aux+1]);
}

/*void NAVE::apaga(void){
   setfillstyle(1,0);
   bar(x,y,x+tamx,y-tamy);
}*/

void NAVE::move(int px,int py){
   apaga();
   x+=px;
   y+=py;
   desenha();
}

void NAVE::dispara(int px,int py,char ptipo,char pdir){
   switch(ptipo){
      case 0:
	 assert(new TIRO(px,py,1,15,1,pdir)!=NULL);
	 break;
      case 1:
	 assert(new T01(px,py)!=NULL);
	 break;
      case 2: case 3: case 4:
         assert(new T02(px,py,ptipo-2)!=NULL);
         break;
      case 5:
         assert(new T03(px,py,pdir)!=NULL);
         break;
      case 6:
         assert(new T04(px,py)!=NULL);
         break;
      case 7:
         assert(new T05(px,py)!=NULL);
         break;
      case 8:
         assert(new T06(px,py)!=NULL);
         break;
      case 10:
         assert(new T07(px,py)!=NULL);
         break;
   }
}

void NAVE::anima(void){
}

void NAVE::animacoes(void){
   NAVE *atual=primeira;
   while(atual!=NULL){
      NAVE *prox=atual->proximo;
      atual->anima();
      atual=prox;
   }
   if(nave!=NULL){ // verifica se naves bateram com a primeira (jogador)
      NAVE *atual=primeira->proximo;
      while(atual!=NULL){
         NAVE *prox=atual->proximo;
         if(primeira->x+30>=atual->x&&
            primeira->x<=atual->x+30&&
            primeira->y-30<=atual->y&&
            primeira->y>=atual->y-30){
               atual->bateu();
         }
         atual=prox;
      }
   }
}

void NAVE::bateu(void){
   if(nave!=NULL){
      for(char i=0;i<10;i++) assert(new RASPAO(primeira->x+random(60),primeira->y-random(60))!=NULL);
      if((primeira->forca-=forca)<=0) {
         if(primeira==nave) nave=NULL;
         primeira->morre();
         assert(new EXPLOSAO(x,y-30)!=NULL);
         assert(new EXPLOSAO(x+30,y-30)!=NULL);
         assert(new EXPLOSAO(x,y)!=NULL);
         assert(new EXPLOSAO(x+30,y)!=NULL);
      }
      assert(new EXPLOSAO(x+15,y-15)!=NULL);
      morre();
   }
}

void NAVE::morre(void){
   delete this;
}
